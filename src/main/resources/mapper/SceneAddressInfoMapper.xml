<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.itcast.ssm.mapper.SceneAddressInfoMapper">
  <resultMap id="BaseResultMap" type="cn.itcast.ssm.po.SceneAddressInfo">
    <id column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="other" jdbcType="VARCHAR" property="other" />
    <result column="interpret" jdbcType="VARCHAR" property="interpret" />
    <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    address_id, address, type_id, other, interpret, unit_name
  </sql>
  <select id="selectByExample" parameterType="cn.itcast.ssm.po.SceneAddressInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from scene_address_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from scene_address_info
    where address_id = #{addressId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from scene_address_info
    where address_id = #{addressId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.itcast.ssm.po.SceneAddressInfoExample">
    delete from scene_address_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.itcast.ssm.po.SceneAddressInfo">
    insert into scene_address_info (address_id, address, type_id, 
      other, interpret, unit_name
      )
    values (#{addressId,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{typeId,jdbcType=INTEGER}, 
      #{other,jdbcType=VARCHAR}, #{interpret,jdbcType=VARCHAR}, #{unitName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.itcast.ssm.po.SceneAddressInfo">
    insert into scene_address_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="addressId != null">
        address_id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="other != null">
        other,
      </if>
      <if test="interpret != null">
        interpret,
      </if>
      <if test="unitName != null">
        unit_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="other != null">
        #{other,jdbcType=VARCHAR},
      </if>
      <if test="interpret != null">
        #{interpret,jdbcType=VARCHAR},
      </if>
      <if test="unitName != null">
        #{unitName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.itcast.ssm.po.SceneAddressInfoExample" resultType="java.lang.Long">
    select count(*) from scene_address_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update scene_address_info
    <set>
      <if test="record.addressId != null">
        address_id = #{record.addressId,jdbcType=INTEGER},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.typeId != null">
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.other != null">
        other = #{record.other,jdbcType=VARCHAR},
      </if>
      <if test="record.interpret != null">
        interpret = #{record.interpret,jdbcType=VARCHAR},
      </if>
      <if test="record.unitName != null">
        unit_name = #{record.unitName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update scene_address_info
    set address_id = #{record.addressId,jdbcType=INTEGER},
      address = #{record.address,jdbcType=VARCHAR},
      type_id = #{record.typeId,jdbcType=INTEGER},
      other = #{record.other,jdbcType=VARCHAR},
      interpret = #{record.interpret,jdbcType=VARCHAR},
      unit_name = #{record.unitName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.itcast.ssm.po.SceneAddressInfo">
    update scene_address_info
    <set>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="other != null">
        other = #{other,jdbcType=VARCHAR},
      </if>
      <if test="interpret != null">
        interpret = #{interpret,jdbcType=VARCHAR},
      </if>
      <if test="unitName != null">
        unit_name = #{unitName,jdbcType=VARCHAR},
      </if>
    </set>
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.itcast.ssm.po.SceneAddressInfo">
    update scene_address_info
    set address = #{address,jdbcType=VARCHAR},
      type_id = #{typeId,jdbcType=INTEGER},
      other = #{other,jdbcType=VARCHAR},
      interpret = #{interpret,jdbcType=VARCHAR},
      unit_name = #{unitName,jdbcType=VARCHAR}
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>
</mapper>
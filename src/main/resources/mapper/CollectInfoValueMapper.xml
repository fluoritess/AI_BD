<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.itcast.ssm.mapper.CollectInfoValueMapper">
  <resultMap id="BaseResultMap" type="cn.itcast.ssm.po.CollectInfoValue">
    <id column=" collect_id" jdbcType="INTEGER" property="collectId" />
    <result column="sensor_id" jdbcType="INTEGER" property="sensorId" />
    <result column="sensor_value" jdbcType="REAL" property="sensorValue" />
    <result column="collect_time" jdbcType="TIMESTAMP" property="collectTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    " collect_id", sensor_id, sensor_value, collect_time
  </sql>
  <select id="selectByExample" parameterType="cn.itcast.ssm.po.CollectInfoValueExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from collect_info_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <!--查询今天的数据-->
  <select id="selectOneDay" resultMap="BaseResultMap">
    SELECT * from collect_info_value
    where TO_DAYS(now())-TO_DAYS(collect_time)&lt;1
  </select>
  <!--查询一周的数据-->
  <select id="selectOneWeek" resultMap="BaseResultMap">
    SELECT * from collect_info_value
    where TO_DAYS(now())-TO_DAYS(collect_time)&lt;7
  </select>
  <!--查询十五分钟-->
  <select id="selectQuarter" resultMap="BaseResultMap">
    select * from collect_info_value
  where collect_time >= now()-interval 15 minute;
  </select>
  <!--查询一小时-->
  <select id="selectOneHour" resultMap="BaseResultMap">
    select * from collect_info_value
  where collect_time >= now()-interval 60 minute;
  </select>
  <!--查询最新-->
  <select id="selectLatest" resultMap="BaseResultMap">
    SELECT * from collect_info_value
where collect_time ORDER BY collect_time DESC LIMIT 1
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from collect_info_value
    where " collect_id" = #{collectId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from collect_info_value
    where " collect_id" = #{collectId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.itcast.ssm.po.CollectInfoValueExample">
    delete from collect_info_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.itcast.ssm.po.CollectInfoValue">
    insert into collect_info_value (" collect_id", sensor_id, sensor_value, 
      collect_time)
    values (#{collectId,jdbcType=INTEGER}, #{sensorId,jdbcType=INTEGER}, #{sensorValue,jdbcType=REAL}, 
      #{collectTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.itcast.ssm.po.CollectInfoValue">
    insert into collect_info_value
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="collectId != null">
        " collect_id",
      </if>
      <if test="sensorId != null">
        sensor_id,
      </if>
      <if test="sensorValue != null">
        sensor_value,
      </if>
      <if test="collectTime != null">
        collect_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="collectId != null">
        #{collectId,jdbcType=INTEGER},
      </if>
      <if test="sensorId != null">
        #{sensorId,jdbcType=INTEGER},
      </if>
      <if test="sensorValue != null">
        #{sensorValue,jdbcType=REAL},
      </if>
      <if test="collectTime != null">
        #{collectTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.itcast.ssm.po.CollectInfoValueExample" resultType="java.lang.Long">
    select count(*) from collect_info_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <update id="updateByExampleSelective" parameterType="map">
    update collect_info_value
    <set>
      <if test="record.collectId != null">
        " collect_id" = #{record.collectId,jdbcType=INTEGER},
      </if>
      <if test="record.sensorId != null">
        sensor_id = #{record.sensorId,jdbcType=INTEGER},
      </if>
      <if test="record.sensorValue != null">
        sensor_value = #{record.sensorValue,jdbcType=REAL},
      </if>
      <if test="record.collectTime != null">
        collect_time = #{record.collectTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update collect_info_value
    set " collect_id" = #{record.collectId,jdbcType=INTEGER},
      sensor_id = #{record.sensorId,jdbcType=INTEGER},
      sensor_value = #{record.sensorValue,jdbcType=REAL},
      collect_time = #{record.collectTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.itcast.ssm.po.CollectInfoValue">
    update collect_info_value
    <set>
      <if test="sensorId != null">
        sensor_id = #{sensorId,jdbcType=INTEGER},
      </if>
      <if test="sensorValue != null">
        sensor_value = #{sensorValue,jdbcType=REAL},
      </if>
      <if test="collectTime != null">
        collect_time = #{collectTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where " collect_id" = #{collectId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.itcast.ssm.po.CollectInfoValue">
    update collect_info_value
    set sensor_id = #{sensorId,jdbcType=INTEGER},
      sensor_value = #{sensorValue,jdbcType=REAL},
      collect_time = #{collectTime,jdbcType=TIMESTAMP}
    where " collect_id" = #{collectId,jdbcType=INTEGER}
  </update>
</mapper>